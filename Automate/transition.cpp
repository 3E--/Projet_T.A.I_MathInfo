#include "transition.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Transition::Transition(){
    /*****************
     * CONSTRUCTEUR
     * ***************/
    etatCourant=NULL;
    nom.clear();
    etatSuivant=NULL;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Transition::Transition(Etat *etatCourantDeLaTransition,const string & nomDeLaTransition,Etat *etatSuivantDeLaTransition){
    /************************************************************************
     * SURCHARGE DU CONSTRUCTEUR POUR CREE UN OBJET TRANSITION
     * *********************************************************************/
    etatCourant=etatCourantDeLaTransition;
    nom=nomDeLaTransition;
    etatSuivant=etatSuivantDeLaTransition;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Transition::Transition(const string &nomEtatCourantDeLaTransition,const string & nomDeLaTransition,const string &nomEtatSuivantDeLaTransition){
    /************************************************************************
     * SURCHARGE DU CONSTRUCTEUR POUR CREE UN OBJET TRANSITION
     * *********************************************************************/

    // ON CREE L'ETAT COURANT DIRECTEMENT DANS L'ATRIBUT EN FONCTION DU NOM
    etatCourant=new Etat(nomEtatCourantDeLaTransition);

    // ON AFFECTE LE NOM DE LA TRANSITON DANS L'ATRIBUT
    nom=nomDeLaTransition;

    // ON CREE L'ETAT COURANT DIRECTEMENT DANS L'ATRIBUT EN FONCTION DU NOM
    etatSuivant=new Etat(nomEtatSuivantDeLaTransition);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Transition::setNom(const string &Nom){
    nom=Nom;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
string Transition::getNom() const{
    return nom;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Transition::setEtatCourant(const string &nomEtatCourrant){
    // ON CREE DIRECTEMENT DANS L'ATRIBUT L'ETAT COURRANT AVEC LE NOM DE L'ETAT COURRANT
    etatCourant=new Etat(nomEtatCourrant);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Transition::setEtatCourant( Etat *_etatCourrant){
    etatCourant=_etatCourrant;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Etat *Transition::getEtatCourant() const{
     return etatCourant;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Transition::setEtatSuivant(const string &nomEtatSuivant){
    // ON CREE DIRECTEMENT DANS L'ATRIBUT L'ETAT SUIVANT AVEC LE NOM DE L'ETAT SUIVANT
    etatSuivant=new Etat(nomEtatSuivant);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Transition::setEtatSuivant( Etat *_etatSuivant){
    etatSuivant=_etatSuivant;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Etat *Transition::getEtatSuivant() const{
    return etatSuivant;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool Transition::operator ==(Transition const& transitiont)const{
    /******************************
     * SURCHARGE DE L'OPERATEUR ==
     * ****************************/

    // ON COMPARE LES ETATS COURRANT, LES NOM ET LES ETAT SUIVANT DES TRANSITIONS ENTRE ELLES POUR SAVOIR SI ELLES SONT EGAUX
    if (etatCourant==transitiont.getEtatCourant()&&nom==transitiont.getNom()&&etatSuivant==transitiont.getEtatSuivant())return true;
    else return false;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool Transition::operator ==(string const& nomTransition)const{
    /******************************
     * SURCHARGE DE L'OPERATEUR ==
     * ****************************/

    // ON COMPARE LE NOM DES 2 TRANSITION EN ARGUMENT
    if (nom==nomTransition)return true;
    else return false;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool Transition::operator !=(Transition const& transitiont)const{
    /******************************
     * SURCHARGE DE L'OPERATEUR ==
     * ****************************/

    // ON COMPARE LES ETATS COURRANT, LES NOM ET LES ETAT SUIVANT DES TRANSITIONS ENTRE ELLES POUR SAVOIR SI ELLES SONT EGAUX
    if (etatCourant!=transitiont.getEtatCourant()&&nom==transitiont.getNom()&&etatSuivant==transitiont.getEtatSuivant())return true;
    else return false;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool Transition::operator !=(string const& nomTransition)const{
    /******************************
     * SURCHARGE DE L'OPERATEUR ==
     * ****************************/

    // ON COMPARE LE NOM DES 2 TRANSITION EN ARGUMENT
    if (nom!=nomTransition)return true;
    else return false;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
